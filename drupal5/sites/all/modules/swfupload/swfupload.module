<?php
// $Id$

/*
 * Implementation of hook_requirements().
 */
function swfupload_requirements($phase) {
  $t = get_t();
  $requirements = array('swfupload' => array('title' => $t('SWFUpload')));
  $path = drupal_get_path('module', 'swfupload') .'/swfupload';
  if (!file_exists($path .'/swfupload.swf') || !file_exists($path .'/swfupload.js')) { 
    $requirements['swfupload']['value'] = $t('Missing files');
    $requirements['swfupload']['description'] = $t('You must install the minimalistic <a href="@swfupload">SWFUpload</a> library to %swfuploadpath.', array('@swfupload' => 'http://swfupload.mammon.se', '%swfuploadpath' => $path));
    $requirements['swfupload']['severity'] = REQUIREMENT_ERROR; 
  }
  else {
    $requirements['swfupload']['value'] = 'Installed';
  }
  return $requirements;
}

/**
 * Implementation of hook_menu().
 */
function swfupload_menu($may_cache) {
  $items = array();

  if ($may_cache) {
    $items[] = array(
      'path' => 'swfupload/js',
      'callback' => 'swfupload_js',
      'access' => user_access('upload files'),
      'type' => MENU_CALLBACK
    );
    $items[] = array('path' => 'flash_upload',
      'callback' => '_swfupload_swfupload',
      'access' => _swfupload_user_access(arg(1)),
      'type' => MENU_CALLBACK
    );    
  }
  return $items;
}

function _swfupload_user_access($key) {
  /*
  THIS IS A BIG SECURITY HOLE - PLEASE HELP FIXING IT
  the code below should work, but for some reason arg(1) contains all kind of different values but not the sid which 
  it is supposed to contain.
  you can check the content of variables in this function by writing them to a table in the database or to a file
  
  $result = db_query("SELECT uid FROM {sessions} WHERE sid = '%s'", $key);
  $session = db_fetch_array($result);
  
  
  if (!$session) {
    return FALSE;
  }
  else {    
    $user = user_load(array('uid' => $session['uid']));
    return user_access('upload files', $user);
  }
  */
  return TRUE;
}

function _swfupload_swfupload() {
  // Load drupal session and get session vars
  
  $session_id = arg(1);
  session_id($session_id);
  session_decode(sess_read($session_id));

  // Adapt to drupal files structure

  $_FILES['files']['name']['upload'] = $_FILES['Filedata']['name'];
  $_FILES['files']['type']['upload'] = $_FILES['Filedata']['type'];
  $_FILES['files']['tmp_name']['upload'] = $_FILES['Filedata']['tmp_name'];
  $_FILES['files']['error']['upload'] = $_FILES['Filedata']['error'];
  $_FILES['files']['size']['upload'] = $_FILES['Filedata']['size'];
  
  // The following code is taken from the upload.module:
  
  // Clean up old file previews if a post didn't get the user to this page.
  // i.e. the user left the edit page, because they didn't want to upload anything.

  if(count($_POST) == 0) {
    if (is_array($_SESSION['file_previews']) && count($_SESSION['file_previews'])) {
      foreach ($_SESSION['file_previews'] as $fid => $file) {
        file_delete($file->filepath);
      }
      unset($_SESSION['file_previews']);
    }
  }

  // $_SESSION['file_current_upload'] tracks the fid of the file submitted this page request.
  // form_builder sets the value of file->list to 0 for checkboxes added to a form after
  // it has been submitted. Since unchecked checkboxes have no return value and do not
  // get a key in _POST form_builder has no way of knowing the difference between a check
  // box that wasn't present on the last form build, and a checkbox that is unchecked.

  unset($_SESSION['file_current_upload']);

  // Save new file uploads to tmp dir.
  if ($file = file_check_upload()) {

    // Scale image uploads.
    $file = _upload_image($file);
    
    // Get unique key - I use that since I had troubles using count() in this context
    $index = mt_rand();
    if (!$index) $index = 0;
    $key = "upload_".$index;

    $file->fid = $key;
    $file->source = $key;
    $file->list = variable_get('upload_list_default',1);
    $_SESSION['file_previews'][$key] = $file;
    // Store the uploaded fid for this page request in case of submit without
    // preview or attach. See earlier notes.
    $_SESSION['file_current_upload'] = $key;
  }
  
  // write to drupal session 
  sess_write($session_id, session_encode());
}

/**
 * Implementation of hook_form_alter().
 */
function swfupload_form_alter($form_id, &$form) {
  if ($form_id == 'node_type_form' && isset($form['identity']['type'])) {
    $form['workflow']['upload'] = array(
      '#type' => 'radios',
      '#title' => t('Attachments'),
      '#default_value' => variable_get('upload_'. $form['#node_type']->type, 1),
      '#options' => array(t('Disabled'), t('Enabled')),
    );
  }

  if (isset($form['type'])) {
    $node = $form['#node'];
    if ($form['type']['#value'] .'_node_form' == $form_id && variable_get("upload_$node->type", TRUE)) {
      drupal_add_js('misc/progress.js');
      drupal_add_js('misc/upload.js');

      // Attachments fieldset
      $form['attachments'] = array(
        '#type' => 'fieldset',
        '#access' => user_access('upload files'),
        '#title' => t('File attachments'),
        '#collapsible' => TRUE,
        '#collapsed' => FALSE,
        '#description' => t('Changes made to the attachments are not permanent until you save this post. The first "listed" file will be included in RSS feeds.'),
        '#prefix' => '<div class="attachments">',
        '#suffix' => '</div>',
        '#weight' => 30,
      );

      $form['attachments']['swfupload'] = array('#prefix' => '<div>', '#suffix' => '</div>', '#value' => _swfupload_interface());

      // Wrapper for fieldset contents (used by upload JS).
      $form['attachments']['wrapper'] = array(
        '#prefix' => '<div id="attach-wrapper">',
        '#suffix' => '</div>',
      );

      // Make sure necessary directories for upload.module exist and are
      // writable before displaying the attachment form.
      $path = file_directory_path();
      $temp = file_directory_temp();
      // Note: pass by reference
      if (!file_check_directory($path, FILE_CREATE_DIRECTORY) || !file_check_directory($temp, FILE_CREATE_DIRECTORY)) {
        $form['attachments']['#description'] =  t('File attachments are disabled. The file directories have not been properly configured.');
        if (user_access('administer site configuration')) {
          $form['attachments']['#description'] .= ' '. t('Please visit the <a href="@admin-file-system">file system configuration page</a>.', array('@admin-file-system' => url('admin/settings/file-system')));
        }
        else {
          $form['attachments']['#description'] .= ' '. t('Please contact the site administrator.');
        }
      }
      else {
        $form['attachments']['wrapper'] += _swfupload_form($node);
        $form['#attributes']['enctype'] = 'multipart/form-data';
      }
    }
  }
}

function _swfupload_add_js() {  
  global $user;
  $path = drupal_get_path('module', 'swfupload');
  drupal_add_js($path .'/swfupload/SWFUpload.js');
  drupal_add_js($path .'/callbacks.js');
  drupal_add_js('
    var swfu;
    var swfu2;
    var progressbarimage = "'. base_path() . $path .'/images/progressbar.png";    
    function start_swfupload() {
      // Max settings
      swfu = new SWFUpload({
        upload_script : "'. url('flash_upload/'. session_id() .'/'. $user->uid) .'",
        target : "SWFUploadTarget",
        flash_path : "'. base_path() . $path .'/swfupload/SWFUpload.swf",
        allowed_filesize : 99720,    // 30 MB
        allowed_filetypes : "*.*",
        allowed_filetypes_description : "'. t('All files...') . '",
        browse_link_innerhtml : "'. t('Browse') . '",
        upload_link_innerhtml : "'. t('Upload queue') . '",
        browse_link_class : "swfuploadbtn browsebtn",
        upload_link_class : "swfuploadbtn uploadbtn",
        flash_loaded_callback : \'swfu.flashLoaded\',
        upload_file_queued_callback : "fileQueued",
        upload_file_start_callback : \'uploadFileStart\',
        upload_progress_callback : \'uploadProgress\',
        upload_file_complete_callback : \'uploadFileComplete\',
        upload_file_cancel_callback : \'uploadFileCancelled\',
        upload_queue_complete_callback : \'uploadQueueComplete\',
        upload_error_callback : \'uploadError\',
        upload_cancel_callback : \'uploadCancel\',
        auto_upload : false,
        debug : false,
        create_ui : $.browser.msie // <-- added this line if using IE7 only
      });
      if ($.browser.msie) {
        swfu.loadUI(); // <-- added this line if using IE7 only
      }
    };
    window.onload = start_swfupload;', 'inline'
  );
}

function _swfupload_form($node) {
  global $user;
  $path = drupal_get_path('module', 'swfupload');
  drupal_add_css($path .'/swfupload.css');
  _swfupload_add_js();  
  
  $form['#theme'] = 'upload_form_new';

  if (is_array($node->files) && count($node->files)) {
    $form['files']['#theme'] = 'upload_form_current';
    $form['files']['#tree'] = TRUE;
    foreach ($node->files as $key => $file) {
      $description = file_create_url((strpos($file->fid, 'upload') === FALSE ? $file->filepath : file_create_filename($file->filename, file_create_path())));
      $description = "<small>". check_plain($description) ."</small>";
      $form['files'][$key]['description'] = array('#type' => 'textfield', '#default_value' => (strlen($file->description)) ? $file->description : $file->filename, '#maxlength' => 256, '#description' => $description );

      $form['files'][$key]['size'] = array('#value' => format_size($file->filesize));
      $form['files'][$key]['remove'] = array('#type' => 'checkbox', '#default_value' => $file->remove);
      $attributes = $file->list ? array('checked' => 'checked') : array();
      $form['files'][$key]['list'] = array('#type' => 'checkbox',  '#default_value' => $file->list, '#attributes' => $attributes);      
      // if the file was uploaded this page request, set value. this fixes the problem
      // formapi has recognizing new checkboxes. see comments in _upload_prepare.
      if ($_SESSION['file_current_upload'] == $file->fid) {
        $form['files'][$key]['list']['#value'] = variable_get('upload_list_default',1);
      }
      $form['files'][$key]['filename'] = array('#type' => 'value',  '#value' => $file->filename);
      $form['files'][$key]['filepath'] = array('#type' => 'value',  '#value' => $file->filepath);
      $form['files'][$key]['filemime'] = array('#type' => 'value',  '#value' => $file->filemime);
      $form['files'][$key]['filesize'] = array('#type' => 'value',  '#value' => $file->filesize);
      $form['files'][$key]['fid'] = array('#type' => 'value',  '#value' => $file->fid);
    }
  }

  if (user_access('upload files')) {
    // This div is hidden when the user uploads through JS.
    $form['new'] = array(
      '#prefix' => '<div id="attach-hide">',
      '#suffix' => '</div>',
    );
    // $form['new']['upload'] = array('#type' => 'file', '#title' => t('Attach new file'), '#size' => 40);
    // The class triggers the js upload behaviour.
    $form['attach-url'] = array('#type' => 'hidden', '#value' => url('swfupload/js', NULL, NULL, TRUE), '#attributes' => array('class' => 'upload'));
    // Attach button turns into Refresh button
    $form['new']['attach'] = array('#type' => 'button', '#value' => t('Refresh'), '#name' => 'attach', '#id' => 'attach-button', '#attributes' => array('style' => 'margin-bottom: 25px;'));    
  }
  // Needed for JS
  $form['current']['vid'] = array('#type' => 'hidden', '#value' => $node->vid);
  return $form;
}

function _swfupload_interface() {
  $interface = '
  <div id="SWFUploadTarget">
  <input name="files[upload]" class="form-file" id="edit-upload" size="40" type="file">
  </div>

  <h4 id="queueinfo">'. t('Queue is empty') . '</h4>
  <div id="SWFUploadFileListingFiles"></div>
  <br class="clr">
  <a class="swfuploadbtn" id="cancelqueuebtn" href="javascript:cancelQueue();">'. t('Cancel queue') . '</a>'; 

  return $interface;
}

/**
 * Menu-callback for JavaScript-based uploads.
 */
function swfupload_js() {
  // We only do the upload.module part of the node validation process.
  $node = (object)$_POST;

  // Load existing node files.
  $node->files = upload_load($node);

  // Handle new uploads, and merge tmp files into node-files.
  _upload_prepare($node);
  _upload_validate($node);

  $form = _swfupload_form($node,TRUE); 
  foreach (module_implements('form_alter') as $module) {
    $function = $module .'_form_alter';
    $function('swfupload_js', $form);
  }
  $form = form_builder('swfupload_js', $form);
  $output = theme('status_messages') . drupal_render($form);
  
  $output .= '<script type="text/javascript">clearQueue();</script>';

  // We send the updated file attachments form.
  print drupal_to_js(array('status' => TRUE, 'data' => $output));
  exit;
}
